#!/bin/python3

import numpy as np
from matplotlib import pyplot as plt
import SoapySDR
print(SoapySDR, __file__)
from SoapySDR import *

############################################################################################
# Settings
############################################################################################
# Data transfer settings
rx_chan = 0             # RX1 = 0, RX2 = 1
N = 16384               # Number of complex samples per transfer
#N = 2048
fs = 10e6            # Radio sample Rate
freq = 100e6            # LO tuning frequency in Hz
use_agc = False          # Use or don't use the AGC
timeout_us = int(10e6)
rx_bits = 12

############################################################################################
# Receive Signal
############################################################################################
sdr = SoapySDR.Device() 
SoapySDR.setLogLevel(SOAPY_SDR_TRACE)

setting = sdr.writeSetting("counter", "true")

sdr.setSampleRate(SOAPY_SDR_RX, rx_chan, fs)          # Set sample rate
sdr.setBandwidth(SOAPY_SDR_RX, rx_chan, fs)          # Set sample rate
#sdr.setGainMode(SOAPY_SDR_RX, rx_chan, use_agc)       # Set the gain mode
sdr.setFrequency(SOAPY_SDR_RX, rx_chan, freq)         # Tune the LO

# Create data buffer and start streaming samples to it
rx_stream = sdr.setupStream(SOAPY_SDR_RX, SOAPY_SDR_CS16, [rx_chan])  # Setup data stream
sdr.activateStream(rx_stream)  # this turns the radio on
rx_buff = np.empty(2 * N, np.int16)                 # Create memory buffer for data stream

for i in range(2):
    print("block", i)
    # Read the samples from the data buffer
    sr = sdr.readStream(rx_stream, [rx_buff], N, timeoutUs=timeout_us)
    rc = sr.ret # number of samples read or the error code
    assert rc == N, 'Error Reading Samples from Device (error code = %d)!' % rc
    print(rx_buff)

    expected = np.int16(rx_buff[0])
    #validate samples
    for j in range(100):
        if np.int16(rx_buff[j]) != expected:
            print("bad value", j, "expected", expected, "value", rx_buff[j])
            for k in range(-5, 5):
                print(k, " ", rx_buff[j+k])
            break
        expected = (expected + 1)

# Stop streaming
sdr.deactivateStream(rx_stream)
sdr.closeStream(rx_stream)

