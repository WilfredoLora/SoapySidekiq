#!/usr/bin/env python3

"""
Transmits a tone at one quarter of the sample rate.
"""
import sys
import time
import numpy as np
import argparse
import SoapySDR
from SoapySDR import *

NUM_MTU = 8



def main(cardno=0, serial=None, handle=0, 
         rate=20e6, bw=None, freq=1e7, 
         attenuation=100, make_float=False, offset=None):

    if serial is None:
        args = dict(card = cardno)
    else:
        args = dict(serial = '8N55')

    sdr = SoapySDR.Device(args)

    SoapySDR.setLogLevel(SOAPY_SDR_TRACE)
#    SoapySDR.setLogLevel(SOAPY_SDR_ERROR)

    if (make_float):
        tx_stream = sdr.setupStream(SOAPY_SDR_TX, SOAPY_SDR_CF32, [handle])
    else:
        tx_stream = sdr.setupStream(SOAPY_SDR_TX, SOAPY_SDR_CS16, [handle])

    tx_buff = np.fromfile("samples.bin", dtype='<i2')
    buff_len = tx_buff.size

    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"Buffer length is {buff_len:,} words")

    # Setup Radio
    sdr.setSampleRate(SOAPY_SDR_TX, handle, rate)

    if bw is not None:
        sdr.setBandwidth(SOAPY_SDR_TX, handle, bw)  
    else:
        sdr.setBandwidth(SOAPY_SDR_TX, handle, (rate * 0.8))  

    sdr.setFrequency(SOAPY_SDR_TX, handle, freq)  

    sdr.setGain(SOAPY_SDR_TX, handle, float(attenuation))

    sdr.activateStream(tx_stream)  # this turns the radio on

    total_samps = 0

    while True:
        try:
            rc = sdr.writeStream(tx_stream, [tx_buff], buff_len)
            if rc.ret != buff_len:
                SoapySDR.log(SoapySDR.SOAPY_SDR_ERROR, 'TX Error {}: {}'.format(rc.ret, errToStr(rc.ret)))
        except KeyboardInterrupt:
            break

        total_samps += buff_len

        if total_samps / rate > 1:
            print(". ", end='', flush=True)
            total_samps = 0

    sdr.deactivateStream(tx_stream)
    sdr.closeStream(tx_stream)


def parse_command_line_arguments():
    """ Create command line options for transmit function """
    help_formatter = argparse.ArgumentDefaultsHelpFormatter
    parser = argparse.ArgumentParser(description='tx app template',
                                     formatter_class=help_formatter)

    parser.add_argument('-c', required=False, dest='card',
                        default="0", help='Card number') 
    parser.add_argument('--serial', required=False, dest='serial',
                        default=None, help='Serial number') 
    parser.add_argument('--handle', type=int, required=False, dest='handle',
                        default=0, help='Handle [0 or 1]')
    parser.add_argument('-r', type=float, required=False, dest='rate',
                        default=40e6, help='Sample Rate')
    parser.add_argument('-bw', type=float, required=False, dest='bw',
                        default=None, help='Bandwidth')
    parser.add_argument('-f', type=float, required=False, dest='freq',
                        default=1000e6, help='LO Frequency')
    parser.add_argument('--offset', type=float, required=False, dest='offset',
                        default=None, help='Offset from LO')
    parser.add_argument('-a', type=int, required=False, dest='attenuation',
                        default=0, help='TX attenuation')
    
    return parser.parse_args(sys.argv[1:])


if __name__ == '__main__':
    pars = parse_command_line_arguments()

    make_float = False

    main(pars.card, 
        pars.serial, 
        pars.handle, 
        pars.rate, 
        pars.bw, 
        pars.freq, 
        pars.attenuation, 
        make_float,
        pars.offset)
